<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我喜欢你喜欢我的歌</title>
  
  <subtitle>Dick</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wxzhongwang.github.io/"/>
  <updated>2021-02-24T15:46:21.324Z</updated>
  <id>https://wxzhongwang.github.io/</id>
  
  <author>
    <name>Dick Zhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://wxzhongwang.github.io/2021/02/24/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8BList%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://wxzhongwang.github.io/2021/02/24/Redis数据类型之List实现数据结构/</id>
    <published>2021-02-24T15:53:08.829Z</published>
    <updated>2021-02-24T15:46:21.324Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: (四)Redis 数据类型之List实现数据结构<br>date: 2018-12-02 12:30:00<br>categories:</p><pre><code>- Redis</code></pre><p>tags:</p><pre><code>- Redis</code></pre><hr><h1 id="四-Redis-数据类型之List实现数据结构"><a href="#四-Redis-数据类型之List实现数据结构" class="headerlink" title="(四)Redis 数据类型之List实现数据结构"></a>(四)Redis 数据类型之List实现数据结构</h1><h2 id="栈：先进后出"><a href="#栈：先进后出" class="headerlink" title="栈：先进后出"></a>栈：先进后出</h2><p>lpush + lpop</p><p>左侧入栈，左侧出站</p><h2 id="队列：先进先出"><a href="#队列：先进先出" class="headerlink" title="队列：先进先出"></a>队列：先进先出</h2><p>lpush + rpop<br>左侧入栈，右侧出栈，队列思想</p><h2 id="有限集合"><a href="#有限集合" class="headerlink" title="有限集合"></a>有限集合</h2><p>lpush + ltrim</p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>lpush + brpop</p><p>左侧不断入栈，通过brpop不断消费List中数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: (四)Redis 数据类型之List实现数据结构&lt;br&gt;date: 2018-12-02 12:30:00&lt;br&gt;categories:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Redis
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tags:&lt;/p&gt;
&lt;pre&gt;&lt;c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wxzhongwang.github.io/2021/02/24/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://wxzhongwang.github.io/2021/02/24/Java单例模式/</id>
    <published>2021-02-24T14:46:06.646Z</published>
    <updated>2019-03-02T02:52:04.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><p>因程序需要，有时我们只需要某个类同时保留一个对象，不希望有更多对象，此时，我们则应考虑单例模式的设计。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>单例模式只能有一个实例。</p></li><li><p>单例类必须创建自己的唯一实例。</p></li><li><p>单例类必须向其他对象提供这一实例。</p></li></ol><h2 id="单例模式VS静态类"><a href="#单例模式VS静态类" class="headerlink" title="单例模式VS静态类"></a>单例模式VS静态类</h2><p>在知道了什么是单例模式后，我想你一定会想到静态类，“既然只使用一个对象，为何不干脆使用静态类？”，这里我会将单例模式和静态类进行一个比较。</p><ol><li><p>单例可以继承和被继承，方法可以被override，而静态方法不可以。</p></li><li><p>静态方法中产生的对象会在执行后被释放，进而被GC清理，不会一直存在于内存中。</p></li><li><p>静态类会在第一次运行时初始化，单例模式可以有其他的选择，即可以延迟加载。</p></li><li><p>基于2， 3条，由于单例对象往往存在于DAO层（例如sessionFactory），如果反复的初始化和释放，则会占用很多资源，而使用单例模式将其常驻于内存可以更加节约资源。</p></li><li><p>静态方法有更高的访问效率。</p></li><li><p>单例模式很容易被测试。</p></li></ol><p>几个关于静态类的误解：</p><ul><li>误解一：静态方法常驻内存而实例方法不是。</li></ul><blockquote><p>实际上，特殊编写的实例方法可以常驻内存，而静态方法需要不断初始化和释放。</p></blockquote><ul><li>误解二：静态方法在堆(heap)上，实例方法在栈(stack)上。</li></ul><blockquote><p>实际上，都是加载到特殊的不可写的代码内存区域中。</p></blockquote><p>静态类和单例模式情景的选择：</p><p>情景一：不需要维持任何状态，仅仅用于全局访问，此时更适合使用静态类。</p><p>情景二：需要维持一些特定的状态，此时更适合使用单例模式。</p><h2 id="单例模式的实现"><a href="#单例模式的实现" class="headerlink" title="单例模式的实现"></a>单例模式的实现</h2><h3 id="1-懒汉模式（线程不安全）"><a href="#1-懒汉模式（线程不安全）" class="headerlink" title="1. 懒汉模式（线程不安全）"></a>1. 懒汉模式（线程不安全）</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonDemo &#123;</span><br><span class="line">    private static SingletonDemo instance;</span><br><span class="line">    private SingletonDemo()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static SingletonDemo getInstance()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="attribute">instance</span>==null)&#123;</span><br><span class="line">            <span class="attribute">instance</span>=new SingletonDemo();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，通过提供一个静态的对象instance，利用private权限的构造方法和getInstance()方法来给予访问者一个单例。</p><p>缺点是，没有考虑到线程安全，可能存在多个访问者同时访问，并同时构造了多个对象的问题。</p><p>之所以叫做懒汉模式，主要是因为此种方法可以非常明显的lazy loading。</p><p>针对懒汉模式线程不安全的问题，我们自然想到了，在getInstance()方法前加锁，于是就有了第二种实现。</p><h3 id="2-懒汉模式二-（线程安全）"><a href="#2-懒汉模式二-（线程安全）" class="headerlink" title="2. 懒汉模式二 （线程安全）"></a>2. 懒汉模式二 （线程安全）</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonDemo &#123;</span><br><span class="line">    private static SingletonDemo instance;</span><br><span class="line">    private SingletonDemo()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static synchronized SingletonDemo getInstance()&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="built_in"> instance </span>= new SingletonDemo();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而并发其实是一种特殊情况，大多时候这个锁占用的额外资源都浪费了，这种打补丁方式写出来的结构效率很低。</p><h3 id="3-饿汉模式"><a href="#3-饿汉模式" class="headerlink" title="3. 饿汉模式"></a>3. 饿汉模式</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonDemo &#123;</span><br><span class="line">    private static SingletonDemo<span class="built_in"> instance </span>= new SingletonDemo();</span><br><span class="line">    private SingletonDemo()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static SingletonDemo getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在运行这个类的时候进行一次loading，之后直接访问。显然，这种方法没有起到lazy loading的效果，考虑到前面提到的和静态类的对比，这种方法只比静态类多了一个内存常驻而已。</p><h3 id="4-静态类内部加载"><a href="#4-静态类内部加载" class="headerlink" title="4. 静态类内部加载"></a>4. 静态类内部加载</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonDemo &#123;</span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> class SingletonHolder&#123;</span><br><span class="line">       <span class="keyword"> private</span><span class="keyword"> static</span> SingletonDemo<span class="built_in"> instance </span>=<span class="built_in"> new </span>SingletonDemo();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword"> private</span> SingletonDemo()&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleton has loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> SingletonDemo getInstance()&#123;</span><br><span class="line">       <span class="built_in"> return </span>SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用内部类的好处是，静态内部类不会在单例加载时就加载，而是在调用getInstance()方法时才进行加载，达到了类似懒汉模式的效果，而这种方法又是线程安全的。</p><h3 id="5-枚举方法"><a href="#5-枚举方法" class="headerlink" title="5. 枚举方法"></a>5. 枚举方法</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SingletonDemo</span>&#123;</span></span><br><span class="line">    INSTANCE;</span><br><span class="line">    public void otherMethods()&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> &#123;</span></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        SingletonDemo.INSTANCE.otherMethods();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提倡的方式，在我看来简直是来自神的写法。解决了以下三个问题：</p><ul><li>(1)自由序列化。</li><li>(2)保证只有一个实例。</li><li>(3)线程安全。</li></ul><p>这种充满美感的代码真的已经终结了其他一切实现方法了。</p><h3 id="6-双重校验锁法"><a href="#6-双重校验锁法" class="headerlink" title="6. 双重校验锁法"></a>6. 双重校验锁法</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonDemo &#123;</span><br><span class="line">    private static SingletonDemo instance;</span><br><span class="line">    private SingletonDemo()&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleton has loaded"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public static SingletonDemo getInstance()&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            synchronized (SingletonDemo.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                   <span class="built_in"> instance </span>= new SingletonDemo();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我解释一下在并发时，双重校验锁法会有怎样的情景：</p><p>STEP 1. 线程A访问getInstance()方法，因为单例还没有实例化，所以进入了锁定块。</p><p>STEP 2. 线程B访问getInstance()方法，因为单例还没有实例化，得以访问接下来代码块，而接下来代码块已经被线程1锁定。</p><p>STEP 3. 线程A进入下一判断，因为单例还没有实例化，所以进行单例实例化，成功实例化后退出代码块，解除锁定。</p><p>STEP 4. 线程B进入接下来代码块，锁定线程，进入下一判断，因为已经实例化，退出代码块，解除锁定。</p><p>STEP 5. 线程A初始化并获取到了单例实例并返回，线程B获取了在线程A中初始化的单例。</p><p>理论上双重校验锁法是线程安全的，并且，这种方法实现了lazyloading。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;h2 id=&quot;什么是单例模式&quot;&gt;&lt;a href=&quot;#什么是单例模式&quot; class=&quot;headerlink&quot; title=&quot;什么是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【05期】Redis常见问题理解</title>
    <link href="https://wxzhongwang.github.io/2020/02/05/%E3%80%9005%E6%9C%9F%E3%80%91Redis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E7%90%86%E8%A7%A3/"/>
    <id>https://wxzhongwang.github.io/2020/02/05/【05期】Redis常见问题理解/</id>
    <published>2020-02-05T02:10:00.000Z</published>
    <updated>2020-04-18T01:11:22.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis常见问题"><a href="#Redis常见问题" class="headerlink" title="Redis常见问题"></a>Redis常见问题</h1><h2 id="1-什么是缓存血崩？怎么解决-？"><a href="#1-什么是缓存血崩？怎么解决-？" class="headerlink" title="1. 什么是缓存血崩？怎么解决    ？"></a>1. 什么是缓存血崩？怎么解决    ？</h2><p>通常，我们会使用缓存用于缓冲对 DB 的冲击，如果缓存宕机，所有请求将直接打在 DB，造成 DB 宕机——从而导致整个系统宕机。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>2 种策略（同时使用）：</p><ul><li><p>对缓存做高可用，防止缓存宕机</p></li><li><p>使用断路器，如果缓存宕机，为了防止系统全部宕机，限制部分流量进入DB，保证部分可用，其余的请求返回断路器的默认值。</p></li></ul><h2 id="2-什么是缓存穿透？怎么解决？"><a href="#2-什么是缓存穿透？怎么解决？" class="headerlink" title="2. 什么是缓存穿透？怎么解决？"></a>2. 什么是缓存穿透？怎么解决？</h2><p>解释 1：缓存查询一个没有的 key，同时数据库也没有，如果黑客大量的使用这种方式，那么就会导致 DB 宕机。</p><blockquote><p>解决方案：我们可以使用一个默认值来防止，例如，当访问一个不存在的 key，然后再去访问数据库，还是没有，那么就在缓存里放一个占位符比如说NULL等等，下次来的时候，检查这个占位符，如果发生时占位符，就不去数据库查询了，防止 DB 宕机。</p></blockquote><p>解释 2：大量请求查询一个刚刚失效的 key，导致 DB 压力倍增，可能导致宕机，但实际上，查询的都是相同的数据。</p><blockquote><p>解决方案：可以在这些请求代码加上双重检查锁。但是那个阶段的请求会变慢。不过总比 DB 宕机好。</p></blockquote><h2 id="3-什么是缓存并发竞争？怎么解决？"><a href="#3-什么是缓存并发竞争？怎么解决？" class="headerlink" title="3. 什么是缓存并发竞争？怎么解决？"></a>3. 什么是缓存并发竞争？怎么解决？</h2><p>解释：多个客户端写一个 key，如果顺序错了，数据就不对了。但是顺序我们无法控制。</p><blockquote><p>解决方案：使用分布式锁，例如 zk，同时加入数据的时间戳。同一时刻，只有抢到锁的客户端才能写入，同时，写入时，比较当前数据的时间戳和缓存中数据的时间戳。</p></blockquote><h2 id="4-什么是缓存和数据库双写不一致？怎么解决？"><a href="#4-什么是缓存和数据库双写不一致？怎么解决？" class="headerlink" title="4.什么是缓存和数据库双写不一致？怎么解决？"></a>4.什么是缓存和数据库双写不一致？怎么解决？</h2><p>解释：连续写数据库和缓存，但是操作期间，出现并发了，数据不一致了。</p><p>通常，更新缓存和数据库有以下几种顺序：</p><ul><li><p>先更新数据库，再更新缓存。</p></li><li><p>先删缓存，再更新数据库。</p></li><li><p>先更新数据库，再删除缓存。</p></li></ul><h2 id="三种方式的优劣来看一下："><a href="#三种方式的优劣来看一下：" class="headerlink" title="三种方式的优劣来看一下："></a>三种方式的优劣来看一下：</h2><h3 id="先更新数据库，再更新缓存。"><a href="#先更新数据库，再更新缓存。" class="headerlink" title="先更新数据库，再更新缓存。"></a>先更新数据库，再更新缓存。</h3><p>这么做的问题是：当有 2 个请求同时更新数据，那么如果不使用分布式锁，将无法控制最后缓存的值到底是多少。也就是并发写的时候有问题。</p><h3 id="先删缓存，再更新数据库"><a href="#先删缓存，再更新数据库" class="headerlink" title="先删缓存，再更新数据库"></a>先删缓存，再更新数据库</h3><p>这么做的问题：如果在删除缓存后，有客户端读数据，将可能读到旧数据，并有可能设置到缓存中，导致缓存中的数据一直是老数据。</p><p>有 2 种解决方案：</p><ul><li><p>使用“双删”，即删更删，最后一步的删除作为异步操作，就是防止有客户端读取的时候设置了旧值。</p></li><li><p>使用队列，当这个key不存在时，将其放入队列，串行执行，必须等到更新数据库完毕才能读取数据。</p></li></ul><p>总的来讲，比较麻烦。</p><h3 id="先更新数据库，再删除缓存"><a href="#先更新数据库，再删除缓存" class="headerlink" title="先更新数据库，再删除缓存"></a>先更新数据库，再删除缓存</h3><p>这个实际是常用的方案，但是有很多人不知道，这里介绍一下，这个叫 Cache Aside Pattern，老外发明的。</p><p>如果在更新数据库之前，缓存刚好失效了，读客户端有可能读到旧值，然后在写客户端删除缓存结束后再次设置了旧值，非常巧合的情况。</p><p>有 2 个前提条件：缓存在写之前的时候失效，同时，在写客户度删除操作结束后，放置旧数据 —— 也就是读比写慢。甚至有的写操作还会锁表。</p><p>所以，这个很难出现，但是如果出现了怎么办？使用双删！！！记录更新期间有没有客户端读数据库，如果有，在更新完数据库之后，执行延迟删除。</p><p>还有一种可能，如果执行更新数据库，准备执行删除缓存时，服务挂了，执行删除失败怎么办？？？</p><p>这就坑了！！！不过可以通过订阅数据库的 binlog 来删除。</p><h2 id="旁路缓存Cache-Aside-Pattern方案："><a href="#旁路缓存Cache-Aside-Pattern方案：" class="headerlink" title="旁路缓存Cache Aside Pattern方案："></a>旁路缓存Cache Aside Pattern方案：</h2><p> 对于读请求</p><ul><li>先读cache，再读db</li><li>如果，cache hit，则直接返回数据</li><li><p>如果，cache miss，则访问db，并将数据set回缓存</p><p>对于写请求</p></li><li><p>淘汰缓存，而不是更新缓存</p></li><li>先操作数据库，再淘汰缓存</li></ul><h3 id="Cache-Aside-Pattern为什么建议淘汰缓存，而不是更新缓存？"><a href="#Cache-Aside-Pattern为什么建议淘汰缓存，而不是更新缓存？" class="headerlink" title="Cache Aside Pattern为什么建议淘汰缓存，而不是更新缓存？"></a>Cache Aside Pattern为什么建议淘汰缓存，而不是更新缓存？</h3><p>如果更新缓存，在并发写时，可能出现数据不一致。如果采用set缓存，在两个并发写发生时，由于无法保证时序，此时不管先操作缓存还是先操作数据库，都可能出现：</p><p>-（1）请求1先操作数据库，请求2后操作数据库</p><p>-（2）请求2先set了缓存，请求1后set了缓存</p><p>导致，数据库与缓存之间的数据不一致。</p><p>所以，Cache Aside Pattern建议，delete缓存，而不是set缓存。</p><h3 id="Cache-Aside-Pattern为什么建议先操作数据库，再操作缓存？"><a href="#Cache-Aside-Pattern为什么建议先操作数据库，再操作缓存？" class="headerlink" title="Cache Aside Pattern为什么建议先操作数据库，再操作缓存？"></a>Cache Aside Pattern为什么建议先操作数据库，再操作缓存？</h3><p>在并发读写发生时，由于无法保证时序，可能出现：</p><p>（1）写请求淘汰了缓存</p><p>（2）写请求操作了数据库（主从同步没有完成）</p><p>（3）读请求读了缓存（cache miss）</p><p>（4）读请求读了从库（读了一个旧数据）</p><p>（5）读请求set回缓存（set了一个旧数据）</p><p>（6）数据库主从同步完成</p><p>导致，数据库与缓存的数据不一致。</p><p>所以，Cache Aside Pattern建议，先操作数据库，再操作缓存。</p><h3 id="Cache-Aside-Pattern方案存在什么问题？"><a href="#Cache-Aside-Pattern方案存在什么问题？" class="headerlink" title="Cache Aside Pattern方案存在什么问题？"></a>Cache Aside Pattern方案存在什么问题？</h3><p>答：如果先操作数据库，再淘汰缓存，在原子性被破坏时：</p><p>（1）修改数据库成功了</p><p>（2）淘汰缓存失败了</p><p>导致，数据库与缓存的数据不一致。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis常见问题&quot;&gt;&lt;a href=&quot;#Redis常见问题&quot; class=&quot;headerlink&quot; title=&quot;Redis常见问题&quot;&gt;&lt;/a&gt;Redis常见问题&lt;/h1&gt;&lt;h2 id=&quot;1-什么是缓存血崩？怎么解决-？&quot;&gt;&lt;a href=&quot;#1-什么是缓存血崩
      
    
    </summary>
    
      <category term="整理" scheme="https://wxzhongwang.github.io/categories/%E6%95%B4%E7%90%86/"/>
    
    
      <category term="整理" scheme="https://wxzhongwang.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【04期】Object类相关方法</title>
    <link href="https://wxzhongwang.github.io/2020/02/04/%E3%80%9004%E6%9C%9F%E3%80%91Object%E7%B1%BB%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://wxzhongwang.github.io/2020/02/04/【04期】Object类相关方法/</id>
    <published>2020-02-04T04:10:00.000Z</published>
    <updated>2020-04-18T01:11:17.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object类包含哪些方法"><a href="#Object类包含哪些方法" class="headerlink" title="Object类包含哪些方法"></a>Object类包含哪些方法</h1><p>Java语言是一种单继承结构语言，Java中所有的类都有一个共同的祖先。这个祖先就是Object类。<br>如果一个类没有用extends明确指出继承于某个类，那么它默认继承Object类。<br>Object的方法我们在平时基本都会用到，但如果没有准备被忽然这么一问，还是有点懵圈的。<br>Object类是Java中所有类的基类。位于java.lang包中，一共有13个方法。</p><h2 id="1-Object"><a href="#1-Object" class="headerlink" title="1.Object()"></a>1.Object()</h2><p>这个没什么可说的，Object类的构造方法。(非重点)</p><h2 id="2-registerNatives"><a href="#2-registerNatives" class="headerlink" title="2.registerNatives()"></a>2.registerNatives()</h2><p>为了使JVM发现本机功能，他们被一定的方式命名。例如，对于java.lang.Object.registerNatives，对应的C函数命名为Java_java_lang_Object_registerNatives。</p><p>通过使用registerNatives（或者更确切地说，JNI函数RegisterNatives），可以命名任何你想要你的C函数。(非重点)</p><h2 id="3-clone"><a href="#3-clone" class="headerlink" title="3.clone()"></a>3.clone()</h2><p>clone()函数的用途是用来另存一个当前存在的对象。只有实现了Cloneable接口才可以调用该方法，否则抛出CloneNotSupportedException异常。（注意：回答这里时可能会引出设计模式的提问）</p><h2 id="4-getClass"><a href="#4-getClass" class="headerlink" title="4.getClass()"></a>4.getClass()</h2><p>final方法，用于获得运行时的类型。该方法返回的是此Object对象的类对象/运行时类对象Class。效果与Object.class相同。（注意：回答这里时可能会引出类加载，反射等知识点的提问）</p><h2 id="5-equals"><a href="#5-equals" class="headerlink" title="5.equals()"></a>5.equals()</h2><p>equals用来比较两个对象的内容是否相等。默认情况下(继承自Object类)，equals和==是一样的，除非被覆写(override)了。（注意：这里可能引出更常问的“equals与==的区别”及hashmap实现原理的提问）</p><h2 id="6-hashCode"><a href="#6-hashCode" class="headerlink" title="6.hashCode()"></a>6.hashCode()</h2><p>该方法用来返回其所在对象的物理地址（哈希码值），常会和equals方法同时重写，确保相等的两个对象拥有相等的hashCode。用于散列存储结构中确定数据的存储位置，hasCode代表的对象地址就是对象在hash表中的位置，物理地址说的是放在内存中的地址，为了查找的便捷性（同样，可能引出hashmap实现原理的提问）</p><h2 id="7-toString"><a href="#7-toString" class="headerlink" title="7.toString()"></a>7.toString()</h2><p>toString()方法返回该对象的字符串表示，这个方法没什么可说的。</p><h2 id="8-wait"><a href="#8-wait" class="headerlink" title="8.wait()"></a>8.wait()</h2><p>导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法。（引出线程通信及“wait和sleep的区别”的提问）</p><h2 id="9-wait-long-timeout"><a href="#9-wait-long-timeout" class="headerlink" title="9.wait(long timeout)"></a>9.wait(long timeout)</h2><p>导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量。（引出线程通信及“wait和sleep的区别”的提问）</p><h2 id="10-wait-long-timeout-int-nanos"><a href="#10-wait-long-timeout-int-nanos" class="headerlink" title="10.wait(long timeout, int nanos)"></a>10.wait(long timeout, int nanos)</h2><p>导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量。（引出线程通信及“wait和sleep的区别”的提问）</p><h2 id="11-notify"><a href="#11-notify" class="headerlink" title="11.notify()"></a>11.notify()</h2><p>唤醒在此对象监视器上等待的单个线程。（引出线程通信的提问）</p><h2 id="12-notifyAll"><a href="#12-notifyAll" class="headerlink" title="12. notifyAll()"></a>12. notifyAll()</h2><p>唤醒在此对象监视器上等待的所有线程。（引出线程通信的提问）</p><h2 id="13-finalize"><a href="#13-finalize" class="headerlink" title="13.finalize()"></a>13.finalize()</h2><p>当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。（非重点，但小心引出垃圾回收的提问）</p><h2 id="引申常见问题"><a href="#引申常见问题" class="headerlink" title="引申常见问题"></a>引申常见问题</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">equals</span><span class="params">()</span></span> 与 == 的区别是什么？</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">hashCode</span><span class="params">()</span></span> 和 equals() 之间有什么联系？</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">wait</span><span class="params">()</span></span>方法与sleep()方法的区别</span><br><span class="line"></span><br><span class="line">为什么重写了equals就必须重写hashCode</span><br><span class="line"></span><br><span class="line">HashMap的实现原理</span><br><span class="line"></span><br><span class="line">谈谈类加载机制</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Object类包含哪些方法&quot;&gt;&lt;a href=&quot;#Object类包含哪些方法&quot; class=&quot;headerlink&quot; title=&quot;Object类包含哪些方法&quot;&gt;&lt;/a&gt;Object类包含哪些方法&lt;/h1&gt;&lt;p&gt;Java语言是一种单继承结构语言，Java中所有的类
      
    
    </summary>
    
      <category term="整理" scheme="https://wxzhongwang.github.io/categories/%E6%95%B4%E7%90%86/"/>
    
    
      <category term="整理" scheme="https://wxzhongwang.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【03期】如何决定使用 HashMap 还是 TreeMap？</title>
    <link href="https://wxzhongwang.github.io/2020/02/03/%E3%80%9003%E6%9C%9F%E3%80%91%E5%A6%82%E4%BD%95%E5%86%B3%E5%AE%9A%E4%BD%BF%E7%94%A8%20HashMap%20%E8%BF%98%E6%98%AF%20TreeMap/"/>
    <id>https://wxzhongwang.github.io/2020/02/03/【03期】如何决定使用 HashMap 还是 TreeMap/</id>
    <published>2020-02-03T02:10:00.000Z</published>
    <updated>2020-04-18T01:11:10.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何决定使用-HashMap-还是-TreeMap？"><a href="#如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="如何决定使用 HashMap 还是 TreeMap？"></a>如何决定使用 HashMap 还是 TreeMap？</h1><h2 id="问：如何决定使用-HashMap-还是-TreeMap？"><a href="#问：如何决定使用-HashMap-还是-TreeMap？" class="headerlink" title="问：如何决定使用 HashMap 还是 TreeMap？"></a>问：如何决定使用 HashMap 还是 TreeMap？</h2><p>介绍<br>TreeMap&lt;K,V&gt;的Key值是要求实现java.lang.Comparable，所以迭代的时候TreeMap默认是按照Key值升序排序的；TreeMap的实现是基于红黑树结构。适用于按自然顺序或自定义顺序遍历键（key）。</p><p>HashMap&lt;K,V&gt;的Key值实现散列hashCode()，分布是散列的、均匀的，不支持排序；数据结构主要是桶(数组)，链表或红黑树。适用于在Map中插入、删除和定位元素。</p><p>结论<br>如果你需要得到一个有序的结果时就应该使用TreeMap（因为HashMap中元素的排列顺序是不固定的）。除此之外，由于HashMap有更好的性能，所以大多不需要排序的时候我们会使用HashMap。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="1、HashMap-和-TreeMap-的实现"><a href="#1、HashMap-和-TreeMap-的实现" class="headerlink" title="1、HashMap 和 TreeMap 的实现"></a>1、HashMap 和 TreeMap 的实现</h3><p>HashMap：基于哈希表实现。使用HashMap要求添加的键类明确定义了hashCode()和equals()[可以重写hashCode()和equals()]，为了优化HashMap空间的使用，您可以调优==初始容量==和==负载因子==。</p><p>HashMap(): 构建一个空的哈希映像</p><p>HashMap(Map m): 构建一个哈希映像，并且添加映像m的所有映射</p><p>HashMap(int initialCapacity): 构建一个拥有特定容量的空的哈希映像</p><p>HashMap(int initialCapacity, float loadFactor): 构建一个拥有特定容量和加载因子的空的哈希映像</p><p>TreeMap：基于红黑树实现。TreeMap没有调优选项，因为该树总处于平衡状态。</p><p>TreeMap()：构建一个空的映像树</p><p>TreeMap(Map m): 构建一个映像树，并且添加映像m中所有元素</p><p>TreeMap(Comparator c): 构建一个映像树，并且使用特定的比较器对关键字进行排序</p><p>TreeMap(SortedMap s): 构建一个映像树，添加映像树s中所有映射，并且使用与有序映像s相同的比较器排序</p><h3 id="2、HashMap-和-TreeMap-都是非线程安全"><a href="#2、HashMap-和-TreeMap-都是非线程安全" class="headerlink" title="2、HashMap 和 TreeMap 都是非线程安全"></a>2、HashMap 和 TreeMap 都是非线程安全</h3><p>HashMap继承AbstractMap抽象类，TreeMap继承自SortedMap接口。</p><p>AbstractMap抽象类：覆盖了equals()和hashCode()方法以确保两个相等映射返回相同的哈希码。如果两个映射大小相等、包含同样的键且每个键在这两个映射中对应的值都相同，则这两个映射相等。映射的哈希码是映射元素哈希码的总和，其中每个元素是Map.Entry接口的一个实现。因此，不论映射内部顺序如何，两个相等映射会报告相同的哈希码。</p><p>SortedMap接口：它用来保持键的有序顺序。SortedMap接口为映像的视图(子集)，包括两个端点提供了访问方法。除了排序是作用于映射的键以外，处理SortedMap和处理SortedSet一样。添加到SortedMap实现类的元素必须实现Comparable接口，否则您必须给它的构造函数提供一个Comparator接口的实现。TreeMap类是它的唯一一个实现。</p><h3 id="3、TreeMap中默认是按照升序进行排序的，如何让他降序"><a href="#3、TreeMap中默认是按照升序进行排序的，如何让他降序" class="headerlink" title="3、TreeMap中默认是按照升序进行排序的，如何让他降序"></a>3、TreeMap中默认是按照升序进行排序的，如何让他降序</h3><p>通过自定义的比较器来实现</p><p>定义一个比较器类，实现Comparator接口，重写compare方法，有两个参数，这两个参数通过调用compareTo进行比较，而compareTo默认规则是：</p><ul><li><p>如果参数字符串等于此字符串，则返回 0 值；</p></li><li><p>如果此字符串小于字符串参数，则返回一个小于 0 的值；</p></li><li><p>如果此字符串大于字符串参数，则返回一个大于 0 的值。</p></li></ul><p>自定义比较器时，在返回时多添加了个负号，就将比较的结果以相反的形式返回，代码如下：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="built_in">int</span> compare(<span class="built_in">Object</span> o1, <span class="built_in">Object</span> o2) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="built_in">String</span> param1 = (<span class="built_in">String</span>)o1;</span><br><span class="line">        <span class="built_in">String</span> param2 = (<span class="built_in">String</span>)o2;</span><br><span class="line">        <span class="keyword">return</span> -param1.compareTo(param2);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后，通过MyComparator类初始化一个比较器实例，将其作为参数传进TreeMap的构造方法中：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyComparator comparator = <span class="keyword">new</span> <span class="type">MyComparator</span>();</span><br><span class="line"></span><br><span class="line">Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; map = <span class="keyword">new</span> <span class="type">TreeMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt;(comparator);</span><br></pre></td></tr></table></figure><p>使用自定义比较器：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class MapTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//初始化自定义比较器</span></span><br><span class="line">        MyComparator comparator = <span class="keyword">new</span> MyComparator();</span><br><span class="line">        <span class="comment">//初始化一个map集合</span></span><br><span class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> TreeMap&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt;(comparator);</span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"a"</span>, <span class="string">"a"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"b"</span>, <span class="string">"b"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"f"</span>, <span class="string">"f"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"d"</span>, <span class="string">"d"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"c"</span>, <span class="string">"c"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"g"</span>, <span class="string">"g"</span>);</span><br><span class="line">        <span class="comment">//遍历输出</span></span><br><span class="line">        Iterator iterator = <span class="built_in">map</span>.keySet().iterator();</span><br><span class="line">        <span class="built_in">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="keyword">String</span> key = (<span class="keyword">String</span>)iterator.next();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> class MyComparator implements Comparator&#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> compare(Object o1, Object o2) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">String</span> param1 = (<span class="keyword">String</span>)o1;</span><br><span class="line">            <span class="keyword">String</span> param2 = (<span class="keyword">String</span>)o2;</span><br><span class="line">            <span class="built_in">return</span> -param1.compareTo(param2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何决定使用-HashMap-还是-TreeMap？&quot;&gt;&lt;a href=&quot;#如何决定使用-HashMap-还是-TreeMap？&quot; class=&quot;headerlink&quot; title=&quot;如何决定使用 HashMap 还是 TreeMap？&quot;&gt;&lt;/a&gt;如何决定使用 H
      
    
    </summary>
    
      <category term="整理" scheme="https://wxzhongwang.github.io/categories/%E6%95%B4%E7%90%86/"/>
    
    
      <category term="整理" scheme="https://wxzhongwang.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【02期】你能说说Spring框架中Bean的生命周期吗？</title>
    <link href="https://wxzhongwang.github.io/2020/02/02/%E3%80%9002%E6%9C%9F%E3%80%91%E4%BD%A0%E8%83%BD%E8%AF%B4%E8%AF%B4Spring%E6%A1%86%E6%9E%B6%E4%B8%ADBean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%90%97/"/>
    <id>https://wxzhongwang.github.io/2020/02/02/【02期】你能说说Spring框架中Bean的生命周期吗/</id>
    <published>2020-02-02T06:30:00.000Z</published>
    <updated>2020-04-18T01:11:06.549Z</updated>
    
    <content type="html"><![CDATA[<p>1、实例化一个Bean－－也就是我们常说的new；</p><p>2、按照Spring上下文对实例化的Bean进行配置－－也就是IOC注入；</p><p>3、如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，此处传递的就是Spring配置文件中Bean的id值</p><p>4、如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory(setBeanFactory(BeanFactory)传递的是Spring工厂自身（可以用这个方式来获取其它Bean，只需在Spring配置文件中配置一个普通的Bean就可以）；</p><p>5、如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文（同样这个方式也可以实现步骤4的内容，但比4更好，因为ApplicationContext是BeanFactory的子接口，有更多的实现方法）；</p><p>6、如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor经常被用作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用那个的方法，也可以被应用于内存或缓存技术；</p><p>7、如果Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。</p><p>8、如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法、；</p><p>注：以上工作完成以后就可以应用这个Bean了，那这个Bean是一个Singleton的，所以一般情况下我们调用同一个id的Bean会是在内容地址相同的实例，当然在Spring配置文件中也可以配置非Singleton，这里我们不做赘述。</p><p>9、当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用那个其实现的destroy()方法；</p><p>10、最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、实例化一个Bean－－也就是我们常说的new；&lt;/p&gt;
&lt;p&gt;2、按照Spring上下文对实例化的Bean进行配置－－也就是IOC注入；&lt;/p&gt;
&lt;p&gt;3、如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法
      
    
    </summary>
    
      <category term="整理" scheme="https://wxzhongwang.github.io/categories/%E6%95%B4%E7%90%86/"/>
    
    
      <category term="整理" scheme="https://wxzhongwang.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【01期】Spring，SpringMVC，SpringBoot，SpringCloud有什么区别和联系？</title>
    <link href="https://wxzhongwang.github.io/2020/02/01/%E3%80%9001%E6%9C%9F%E3%80%91Spring%EF%BC%8CSpringMVC%EF%BC%8CSpringBoot%EF%BC%8CSpringCloud%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/"/>
    <id>https://wxzhongwang.github.io/2020/02/01/【01期】Spring，SpringMVC，SpringBoot，SpringCloud有什么区别和联系/</id>
    <published>2020-02-01T02:10:00.000Z</published>
    <updated>2020-03-19T13:25:51.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。Spring使你能够编写更干净、更可管理、并且更易于测试的代码。</p><p>Spring MVC是Spring的一个模块，一个web框架。通过DispatcherServlet, ModelAndView 和 View Resolver，开发web应用变得很容易。主要针对的是网站应用程序或者服务开发——URL路由、Session、模板引擎、静态Web资源等等。</p><p>Spring配置复杂，繁琐，所以推出了Spring boot，约定优于配置，简化了spring的配置流程。</p><p>Spring Cloud构建于Spring Boot之上，是一个关注全局的服务治理框架。</p><h2 id="Spring-VS-SpringMVC："><a href="#Spring-VS-SpringMVC：" class="headerlink" title="Spring VS SpringMVC："></a>Spring VS SpringMVC：</h2><p>Spring是一个一站式的轻量级的java开发框架，核心是控制反转（IOC）和面向切面（AOP），针对于开发的WEB层(springMvc)、业务层(Ioc)、持久层(jdbcTemplate)等都提供了多种配置解决方案；</p><p>SpringMVC是Spring基础之上的一个MVC框架，主要处理web开发的路径映射和视图渲染，属于Spring框架中WEB层开发的一部分；</p><h2 id="SpringMVC-VS-SpringBoot："><a href="#SpringMVC-VS-SpringBoot：" class="headerlink" title="SpringMVC VS SpringBoot："></a>SpringMVC VS SpringBoot：</h2><p>SpringMVC属于一个企业WEB开发的MVC框架，涵盖面包括前端视图开发、文件配置、后台接口逻辑开发等，XML、config等配置相对比较繁琐复杂；</p><p>SpringBoot框架相对于SpringMVC框架来说，更专注于开发微服务后台接口，不开发前端视图；</p><h2 id="SpringBoot和SpringCloud："><a href="#SpringBoot和SpringCloud：" class="headerlink" title="SpringBoot和SpringCloud："></a>SpringBoot和SpringCloud：</h2><p>SpringBoot使用了约定大于配置的理念，集成了快速开发的Spring多个插件，同时自动过滤不需要配置的多余的插件，简化了项目的开发配置流程，一定程度上取消xml配置，是一套快速配置开发的脚手架，能快速开发单个微服务；</p><p>SpringCloud大部分的功能插件都是基于SpringBoot去实现的，SpringCloud关注于全局的微服务整合和管理，将多个SpringBoot单体微服务进行整合以及管理；SpringCloud依赖于SpringBoot开发，而SpringBoot可以独立开发；</p><h2 id="总结下来："><a href="#总结下来：" class="headerlink" title="总结下来："></a>总结下来：</h2><p>Spring是核心，提供了基础功能；</p><p>Spring MVC 是基于Spring的一个 MVC 框架 ；</p><p>Spring Boot 是为简化Spring配置的快速开发整合包；</p><p>Spring Cloud是构建在Spring Boot之上的服务治理框架。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h1&gt;&lt;p&gt;Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。Spring使你能够编写更干净、更可管理、并且更
      
    
    </summary>
    
      <category term="整理" scheme="https://wxzhongwang.github.io/categories/%E6%95%B4%E7%90%86/"/>
    
    
      <category term="整理" scheme="https://wxzhongwang.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="https://wxzhongwang.github.io/2019/12/02/RabbitMQ/"/>
    <id>https://wxzhongwang.github.io/2019/12/02/RabbitMQ/</id>
    <published>2019-12-02T04:30:00.000Z</published>
    <updated>2021-02-24T15:08:00.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>RabbitMQ 是采用 Erlang 语言实现 AMQP(Advanced Message Queuing Protocol，高级消息队列协议）的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。</p><ul><li>可靠性： RabbitMQ使用一些机制来保证消息的可靠性，如持久化、传输确认及发布确认等。</li><li>灵活的路由： 在消息进入队列之前，通过交换器来路由消息。对于典型的路由功能，RabbitMQ 己经提供了一些内置的交换器来实现。针对更复杂的路由功能，可以将多个交换器绑定在一起，也可以通过插件机制来实现自己的交换器。</li><li>扩展性： 多个RabbitMQ节点可以组成一个集群，也可以根据实际业务情况动态地扩展集群中节点。</li><li>高可用性： 队列可以在集群中的机器上设置镜像，使得在部分节点出现问题的情况下队列仍然可用。</li><li>支持多种协议： RabbitMQ 除了原生支持 AMQP 协议，还支持 STOMP、MQTT 等多种消息中间件协议。</li><li>多语言客户端： RabbitMQ几乎支持所有常用语言，比如 Java、Python、Ruby、PHP、C#、JavaScript等。</li><li>易用的管理界面： RabbitMQ提供了一个易用的用户界面，使得用户可以监控和管理消息、集群中的节点等。在安装 RabbitMQ 的时候会介绍到，安装好 RabbitMQ 就自带管理界面。</li><li>插件机制： RabbitMQ 提供了许多插件，以实现从多方面进行扩展，当然也可以编写自己的插件。感觉这个有点类似 Dubbo 的 SPI机制。</li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><blockquote><p>消息投递 </p></blockquote><p>RabbitMQ 整体上是一个生产者与消费者模型，主要负责接收、存储和转发消息。可以把消息传递的过程想象成：当你将一个包裹送到邮局，邮局会暂存并最终将邮件通过邮递员送到收件人的手上，RabbitMQ就好比由邮局、邮箱和邮递员组成的一个系统。从计算机术语层面来说，RabbitMQ 模型更像是一种交换机模型。</p><p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/96388546.jpg" alt="image"></p><h2 id="发布订阅-（生产消费）"><a href="#发布订阅-（生产消费）" class="headerlink" title="发布订阅 （生产消费）"></a>发布订阅 （生产消费）</h2><ul><li>Producer(生产者) :生产消息的一方（邮件投递者）</li><li>Consumer(消费者) :消费消息的一方（邮件收件人）</li></ul><p>消息一般由 2 部分组成：消息头（或者说是标签 Label）和 消息体。消息体也可以称为payLoad,消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。生产者把消息交由 RabbitMQ 后，RabbitMQ 会根据消息头把消息发送给感兴趣的 Consumer(消费者)。</p><h2 id="交换器-Exchange"><a href="#交换器-Exchange" class="headerlink" title="交换器 Exchange"></a>交换器 Exchange</h2><p>RabbitMQ 的 Exchange(交换器)有4种类型（++常用++），不同的类型对应着不同的路由策略：</p><ul><li>direct(默认)</li><li>fanout</li><li>topic</li><li>headers</li></ul><p>不同类型的Exchange转发消息的策略有所区别。<br>在 RabbitMQ 中，消息并不是直接被投递到 Queue(消息队列) 中的，中间还必须经过 Exchange(交换器) 这一层，Exchange(交换器) 会把我们的消息分配到对应的 Queue(消息队列) 中<br><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/24007899.jpg" alt="image"></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>生产者将消息发给交换器的时候，一般会指定一个==RoutingKey(路由键)==，用来指定这个消息的路由规则，而这个 <em>++RoutingKey++</em> 需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效。</p><p>RabbitMQ 中通过 Binding(绑定) 将 Exchange(交换器) 与 Queue(消息队列) 关联起来，在绑定的时候一般会指定一个 BindingKey(绑定建) ,这样 RabbitMQ 就知道如何正确将消息路由到队列了,如下图所示。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。Exchange 和 Queue 的绑定可以是多对多的关系。</p><p>Binding(绑定) 示意图：</p><p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/70553134.jpg" alt="image"></p><p>生产者将消息发送给交换器时，需要一个RoutingKey,当 BindingKey 和 RoutingKey 相匹配时，消息会被路由到对应的队列中。在绑定多个队列到同一个交换器的时候，这些绑定允许使用相同的 BindingKey。BindingKey 并不是在所有的情况下都生效，它依赖于交换器类型，比如fanout类型的交换器就会无视，而是将消息路由到所有绑定到该交换器的队列中。</p><p>生产者  ===》RouteKey ===&gt; Exchange ===&gt; BindKey ==(mutiple allowed)=&gt; Queue</p><h2 id="RabbitMq工作流程"><a href="#RabbitMq工作流程" class="headerlink" title="RabbitMq工作流程"></a>RabbitMq工作流程</h2><p>对于 RabbitMQ 来说，一个 RabbitMQ Broker 可以简单地看作一个 RabbitMQ 服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个 RabbitMQ Broker 看作一台 RabbitMQ 服务器。</p><p>下图展示了生产者将消息存入 RabbitMQ Broker,以及消费者从Broker中消费数据的整个流程。</p><p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/67952922.jpg" alt="image"></p><h2 id="交换机类型"><a href="#交换机类型" class="headerlink" title="交换机类型"></a>交换机类型</h2><p>RabbitMQ 常用的 Exchange Type 有 fanout、direct、topic、headers 这四种（AMQP规范里还提到两种 Exchange Type，分别为 system 与 自定义，这里不予以描述）。</p><h3 id="①-fanout"><a href="#①-fanout" class="headerlink" title="① fanout"></a>① fanout</h3><p>fanout 类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中，不需要做任何判断操作，所以 fanout 类型是所有的交换机类型里面速度最快的。fanout 类型常用来广播消息。</p><h3 id="②-direct"><a href="#②-direct" class="headerlink" title="② direct"></a>② direct</h3><p>direct 类型的Exchange路由规则也很简单，它会把消息路由到那些 Bindingkey 与 RoutingKey 完全匹配的 Queue 中。</p><p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/37008021.jpg" alt="image"></p><h3 id="③-topic"><a href="#③-topic" class="headerlink" title="③ topic"></a>③ topic</h3><p>前面讲到direct类型的交换器路由规则是完全匹配 BindingKey 和 RoutingKey ，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与 direct 类型的交换器相似，也是将消息路由到 BindingKey 和 RoutingKey 相匹配的队列中，但这里的匹配规则有些不同，它约定：</p><p>RoutingKey 为一个点号“．”分隔的字符串（被点号“．”分隔开的每一段独立的字符串称为一个单词），如 “com.rabbitmq.client”、“java.util.concurrent”、“com.hidden.client”;<br>BindingKey 和 RoutingKey 一样也是点号“．”分隔的字符串；<br>BindingKey 中可以存在两种特殊字符串“ <em> ”和“ # ”，用于做模糊匹配，其中“ </em> ”用于匹配一个单词，“#”用于匹配多个单词(可以是零个)。</p><p><img src="http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/73843.jpg" alt="image"></p><h3 id="④-headers-不推荐"><a href="#④-headers-不推荐" class="headerlink" title="④ headers(不推荐)"></a>④ headers(不推荐)</h3><p>headers 类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中的 headers 属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的 headers（也是一个键值对的形式)’对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers 类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="RabbitMQ" scheme="https://wxzhongwang.github.io/categories/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="https://wxzhongwang.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>优秀开源项目</title>
    <link href="https://wxzhongwang.github.io/2019/12/02/%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <id>https://wxzhongwang.github.io/2019/12/02/优秀开源项目/</id>
    <published>2019-12-02T04:30:00.000Z</published>
    <updated>2021-02-24T15:07:56.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优秀开源项目"><a href="#优秀开源项目" class="headerlink" title="优秀开源项目"></a>优秀开源项目</h1><h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><h3 id="Yearning-SQL-审核平台"><a href="#Yearning-SQL-审核平台" class="headerlink" title="Yearning SQL 审核平台"></a>Yearning SQL 审核平台</h3><p>基于Inception的企业级web端 SQL审核平台。</p><p><a href="http://yearning.io/" target="_blank" rel="noopener">官网</a></p><p><a href="https://gitee.com/mirrors/Yearning" target="_blank" rel="noopener">git</a><br>项目地址：<br><a href="https://gitee.com/mirrors/Yearning" target="_blank" rel="noopener">https://gitee.com/mirrors/Yearning</a></p><h3 id="Spug-自动运维"><a href="#Spug-自动运维" class="headerlink" title="Spug 自动运维"></a>Spug 自动运维</h3><p>Spug是面向中小型企业设计的轻量级无Agent的自动化运维平台，整合了主机管理、主机批量执行、主机在线终端、应用发布部署、在线任务计划、配置中心、监控、报警等一系列功能。</p><p><a href="https://github.com/openspug/spug" target="_blank" rel="noopener">git</a><br>项目地址：<br><a href="https://github.com/openspug/spug" target="_blank" rel="noopener">https://github.com/openspug/spug</a></p><p><a href="https://demo.spug.dev/home" target="_blank" rel="noopener">演示地址</a> <a href="https://demo.spug.dev/home" target="_blank" rel="noopener">https://demo.spug.dev/home</a></p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>批量执行: 主机命令在线批量执行</li><li>在线终端: 主机支持浏览器在线终端登录</li><li>文件管理: 主机文件在线上传下载</li><li>任务计划: 灵活的在线任务计划</li><li>发布部署: 支持自定义发布部署流程</li><li>配置中心: 支持KV、文本、json等格式的配置</li><li>监控中心: 支持站点、端口、进程、自定义等监控</li><li>报警中心: 支持短信、邮件、钉钉、微信等报警方式</li><li>优雅美观: 基于 Ant Design 的UI界面</li><li>开源免费: 前后端代码完全开源</li><li><h3 id="J-IM"><a href="#J-IM" class="headerlink" title="J-IM"></a>J-IM</h3></li></ul><p>J-IM 是用JAVA语言,基于t-io开发的轻量、高性能、单机支持几十万至百万在线用户IM，主要目标降低即时通讯门槛，快速打造低成本接入在线IM系统，通过极简洁的消息格式就可以实现多端不同协议间的消息发送如内置(Http、Websocket、Tcp自定义IM协议)等，并提供通过http协议的api接口进行消息发送无需关心接收端属于什么协议，一个消息格式搞定一切！</p><blockquote><p>t-io <a href="https://www.tiocloud.com/tio.pdf" target="_blank" rel="noopener">https://www.tiocloud.com/tio.pdf</a></p></blockquote><p><a href="https://gitee.com/LuckyFishSpace/j-im" target="_blank" rel="noopener">git</a></p><p>项目地址：<br><a href="https://gitee.com/LuckyFishSpace/j-im" target="_blank" rel="noopener">https://gitee.com/LuckyFishSpace/j-im</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;优秀开源项目&quot;&gt;&lt;a href=&quot;#优秀开源项目&quot; class=&quot;headerlink&quot; title=&quot;优秀开源项目&quot;&gt;&lt;/a&gt;优秀开源项目&lt;/h1&gt;&lt;h2 id=&quot;运维&quot;&gt;&lt;a href=&quot;#运维&quot; class=&quot;headerlink&quot; title=&quot;运维&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="拓展" scheme="https://wxzhongwang.github.io/categories/%E6%8B%93%E5%B1%95/"/>
    
    
      <category term="拓展" scheme="https://wxzhongwang.github.io/tags/%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Eureka服务注册与发现</title>
    <link href="https://wxzhongwang.github.io/2019/12/02/Eureka%20%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    <id>https://wxzhongwang.github.io/2019/12/02/Eureka 服务注册与发现/</id>
    <published>2019-12-02T04:30:00.000Z</published>
    <updated>2021-02-24T15:07:42.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h2><h3 id="概念原理"><a href="#概念原理" class="headerlink" title="概念原理"></a>概念原理</h3><p>过去，每个应用都是一个CPU，一个主机上的单一系统。然而今天，随着大数据和云计算时代的到来，任何独立的程序都可以运行在多个计算机上。并且随着业务的发展，访问用户量的增加，开发人员或小组的增加，<br>系统会被拆分成多个功能模块。拆分后每个功能模块可以作为一个独立的子系统提供其职责范围内的功能。而多个子系统中，由于职责不同并且会存在相互调用，同时可能每个子系统还需要多个实例部署在多台<br>服务器或者镜像中，导致了子系统间的相互调用形成了一个错综复杂的网状结构。</p><p>从单体演变成分布式架构。随着系统结构、架构的演变，系统功能的增加，用户量的增加，开发人员的增加等各种增加情况下，需要有一个比较好扩展的系统架构来快速、尽量减少代码改动的前提下以支持系统功能<br>的开发，用户量增加导致的硬件资源横向扩容，以及开发人员增加时的协同工作效率。在此基础上需要解决系统的稳定性、容错性、高并发的支持性等。以及随着系统功能的增加如何有效的管理系统，排查、<br>定位系统问题。同时当参与项目的人（包含测试、运维、业务等人员）越来越多时，如何能更高效的彼此之间协同办公的效率等等。所以微服务架构需要考虑的不仅仅是软件架构本身，需要从参与到整个项目实施<br>过程中的各个环节，可能的问题以及人员协同的整体情况去考虑。让整个项目做到可用（满足功能以及硬件资源的横向扩容）、可行（满足整个系统运行中的各个点的监控、排错等）、可持续（满足系统功能的可持续集成、<br>以及系统运行的可持续性）以及高效（系统运行的高效、人员协同工作的高效、功能迭代的高效等）。</p><h3 id="微服务通俗讲解"><a href="#微服务通俗讲解" class="headerlink" title="微服务通俗讲解"></a>微服务通俗讲解</h3><p>Spring Cloud提供了微服务解决的一整套方案，而Eureka是其重要组件，所以先要了解什么是“微服务”。</p><p>在大型系统架构中，会拆分多个子系统。这些系统往往都有这几个功能：提供接口，调用接口，以及该子系统自身的业务功能。这样的一个子系统就称为一个“微服务”。（可以理解为一个子系统的代码所实现的功能）</p><p>实例：<br>每个服务都会部署到多个机器（或镜像）中，这些多个部署的应用就是实例。（可以理解为一套子系统代码被部署到了多个机器上）</p><h4 id="Eureka的管理"><a href="#Eureka的管理" class="headerlink" title="Eureka的管理"></a>Eureka的管理</h4><p>基于以上概念，使用Eureka管理时会具备几个特性：</p><ul><li>服务需要有一个统一的名称（或服务ID）并且是唯一标识，以便于接口调用时各个接口的区分。并且需要将其注册到Eureka Server中，其他服务调用该接口时，也是根据这个唯一标识来获取。</li><li>服务下有多个实例，每个实例也有一个自己的唯一实例ID。因为它们各自有自己的基础信息如：不同的IP。所以它们的信息也需要注册到Eureka Server中，其他服务调用它们的服务接口时，<br>可以查看到多个该服务的实例信息，根据负载策略提供某个实例的调用信息后，调用者根据信息直接调用该实例。</li></ul><h3 id="eureka如何管理服务调用"><a href="#eureka如何管理服务调用" class="headerlink" title="eureka如何管理服务调用"></a>eureka如何管理服务调用</h3><ul><li><p>在Eureka Client启动的时候，将自身的服务的信息发送到Eureka Server。然后进行2调用当前服务器节点中的其他服务信息，保存到Eureka Client中。当服务间相互调用其它服务时，在Eureka Client中<br>获取服务信息（如服务地址，端口等）后，进行第3步，根据信息直接调用服务。（注：服务的调用通过http(s)调用）</p></li><li><p>当某个服务仅需要调用其他服务，自身不提供服务调用时。在Eureka Client启动后会拉取Eureka Server的其他服务信息，需要调用时，在Eureka Client的本地缓存中获取信息，调用服务。</p></li><li><p>Eureka Client通过向Eureka Serve发送心跳（默认每30秒）来续约服务的。 如果客户端持续不能续约，那么，它将在大约90秒内从服务器注册表中删除。 注册信息和续订被复制到集群中的Eureka Serve所有节点。 以此来确保当前服务还“活着”，可以被调用。</p></li><li><p>来自任何区域的Eureka Client都可以查找注册表信息（每30秒发生一次），以此来确保调用到的服务是“活的”。并且当某个服务被更新或者新加进来，也可以调用到新的服务。</p></li></ul><h3 id="Eureka-Server："><a href="#Eureka-Server：" class="headerlink" title="Eureka Server："></a>Eureka Server：</h3><ul><li><p>提供服务注册：各个微服务启动时，会通过Eureka Client向Eureka Server进行注册自己的信息（例如服务信息和网络信息），Eureka Server会存储该服务的信息。</p></li><li><p>提供服务信息提供：服务消费者在调用服务时，本地Eureka Client没有的情况下，会到Eureka Server拉取信息。</p></li><li><p>提供服务管理：通过Eureka Client的Cancel、心跳监控、renew等方式来维护该服务提供的信息以确保该服务可用以及服务的更新。</p></li><li><p>信息同步：每个Eureka Server同时也是Eureka Client，多个Eureka Server之间通过P2P复制的方式完成服务注册表的同步。同步时，被同步信息不会同步出去。也就是说有3个Eureka Server，Server1有新的服务信息时，同步到Server2后，Server2和Server3同步时，Server2不会把从Server1那里同步到的信息同步给Server3，只能由Server1自己同步给Server3。</p></li><li><p>每个可用区有一个Eureka集群，并且每个可用区至少有一个eureka服务器来处理区内故障。为了实现高可用，一般一个可用区中由三个Eureka Server组成。</p></li></ul><h3 id="Eureka-Client："><a href="#Eureka-Client：" class="headerlink" title="Eureka Client："></a>Eureka Client：</h3><ul><li><p>Eureka Client是一个Java客户端，用于简化与Eureka Server的交互。并且管理当前微服务，同时为当前的微服务提供服务提供者信息。</p></li><li><p>Eureka Client会拉取、更新和缓存Eureka Server中的信息。即使所有的Eureka Server节点都宕掉，服务消费者依然可以使用缓存中的信息找到服务提供者。</p></li><li><p>Eureka Client在微服务启动后，会周期性地向Eureka Server发送心跳（默认周期为30秒）以续约自己的信息。如果Eureka Server在一定时间内没有接收到某个微服务节点的心跳，Eureka Server将会注销该微服务节点（默认90秒）。</p></li><li><p>Eureka Client包含服务提供者Applicaton Service和服务消费者Application Client</p></li><li><p>Applicaton Service：服务提供者，提供服务给别个调用。</p></li><li><p>Application Client：服务消费者，调用别个提供的服务。</p></li><li><p>往往大多数服务本身既是服务提供者，也是服务消费者。</p></li></ul><h3 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h3><h4 id="Register：服务注册"><a href="#Register：服务注册" class="headerlink" title="Register：服务注册"></a>Register：服务注册</h4><p>当Eureka客户端向Eureka Server注册时，它提供自身的元数据，比如IP地址、端口，运行状况指示符URL，主页等。</p><h4 id="Renew：服务续约"><a href="#Renew：服务续约" class="headerlink" title="Renew：服务续约"></a>Renew：服务续约</h4><p>Eureka Client会每隔30秒发送一次心跳来续约。 通过续约来告知Eureka Server该Eureka客户仍然存在，没有出现问题。 正常情况下，如果Eureka Server在90秒没有收到Eureka客户的续约，它会将实例从其注册表中删除。 建议不要更改续约间隔。</p><h4 id="Fetch-Registries：获取注册列表信息"><a href="#Fetch-Registries：获取注册列表信息" class="headerlink" title="Fetch Registries：获取注册列表信息"></a>Fetch Registries：获取注册列表信息</h4><p>Eureka客户端从服务器获取注册表信息，并将其缓存在本地。客户端会使用该信息查找其他服务，从而进行远程调用。该注册列表信息定期（每30秒钟）更新一次。每次返回注册列表信息可能与Eureka客户端的缓存信息不同， Eureka客户端自动处理。如果由于某种原因导致注册列表信息不能及时匹配，Eureka客户端则会重新获取整个注册表信息。 Eureka服务器缓存注册列表信息，整个注册表以及每个应用程序的信息进行了压缩，压缩内容和没有压缩的内容完全相同。Eureka客户端和Eureka 服务器可以使用JSON / XML格式进行通讯。在默认的情况下Eureka客户端使用压缩JSON格式来获取注册列表的信息。</p><h4 id="Cancel：服务下线"><a href="#Cancel：服务下线" class="headerlink" title="Cancel：服务下线"></a>Cancel：服务下线</h4><p>Eureka客户端在程序关闭时向Eureka服务器发送取消请求。 发送请求后，该客户端实例信息将从服务器的实例注册表中删除。该下线请求不会自动完成，它需要调用以下内容：</p><p>DiscoveryManager.getInstance().shutdownComponent()；</p><h5 id="Eviction：服务剔除"><a href="#Eviction：服务剔除" class="headerlink" title="Eviction：服务剔除"></a>Eviction：服务剔除</h5><p>在默认的情况下，当Eureka客户端连续90秒没有向Eureka服务器发送服务续约，即心跳，Eureka服务器会将该服务实例从服务注册列表删除，即服务剔除。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Eureka服务注册与发现&quot;&gt;&lt;a href=&quot;#Eureka服务注册与发现&quot; class=&quot;headerlink&quot; title=&quot;Eureka服务注册与发现&quot;&gt;&lt;/a&gt;Eureka服务注册与发现&lt;/h2&gt;&lt;h3 id=&quot;概念原理&quot;&gt;&lt;a href=&quot;#概念原理&quot;
      
    
    </summary>
    
      <category term="SpringCloud" scheme="https://wxzhongwang.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://wxzhongwang.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud Config配置中心</title>
    <link href="https://wxzhongwang.github.io/2019/12/02/Spring%20Cloud%20Config%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <id>https://wxzhongwang.github.io/2019/12/02/Spring Cloud Config配置中心/</id>
    <published>2019-12-02T04:30:00.000Z</published>
    <updated>2021-02-24T15:07:38.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud-Config配置中心"><a href="#SpringCloud-Config配置中心" class="headerlink" title="SpringCloud Config配置中心"></a>SpringCloud Config配置中心</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，<br>它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。在spring cloud config 组件中，分两个角色，一是Config-Server，二是Config-Client。</p><h2 id="Config-Server从本地读取配置文件"><a href="#Config-Server从本地读取配置文件" class="headerlink" title="Config Server从本地读取配置文件"></a>Config Server从本地读取配置文件</h2><p>创建一个spring-boot项目，取名为 config-server，依赖如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注解 @EnableConfigServer 开启配置服务器<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableConfigServer</span> <span class="comment">//开启配置服务器</span></span><br><span class="line">public class ConfigServerApplication &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(ConfigServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要在程序的配置文件application.properties文件配置以下。通过 spring.profile.active=native 来配置 ConfigServer 从本地读取配置，读取的路径为 classpath 下的 shared 目录。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">server</span>:</span><br><span class="line"><span class="attribute">port</span>: <span class="number">8769</span></span><br><span class="line"><span class="attribute">spring</span>:</span><br><span class="line"><span class="attribute">application</span>:</span><br><span class="line"><span class="attribute">name</span>: config-server</span><br><span class="line"><span class="attribute">profiles</span>:</span><br><span class="line"><span class="attribute">active</span>: native</span><br><span class="line"><span class="attribute">cloud</span>:</span><br><span class="line"><span class="attribute">config</span>:</span><br><span class="line"><span class="attribute">server</span>:</span><br><span class="line"><span class="attribute">native</span>:</span><br><span class="line"><span class="attribute">search-locations</span>: <span class="attribute">classpath</span>:/shared</span><br></pre></td></tr></table></figure><p>在 resources 目录下新建 shared 文件夹，在 shared 文件夹下新建 config-client-dev.yml 文件。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">server:</span></span><br><span class="line"><span class="symbol">  port:</span> <span class="number">8762</span></span><br><span class="line">  </span><br><span class="line"><span class="symbol">foo:</span> foo version <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>启动 config-server 工程！</p><h2 id="构建Config-Client"><a href="#构建Config-Client" class="headerlink" title="构建Config-Client"></a>构建Config-Client</h2><p>创建一个spring-boot项目，取名为 config-client，依赖如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在 resources 目录下新建 bootstrap.yml 文件，因为 bootstrap 相对于 application 具有优先的执行顺序。<br>变量{spring.application.name}和{spring.profiles.active}，两者以“-”相连，构成了向 Config Server 读取的配置文件名。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line"><span class="attr">config:</span></span><br><span class="line"><span class="attr">uri:</span> <span class="attr">http://localhost:8769</span></span><br><span class="line"><span class="attr">fail-fast:</span> <span class="literal">true</span> <span class="comment">#读取没有成功，执行快速失败</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>编写一个接口，测试读取配置文件的 foo 变量，并通过 API 接口返回.<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@RestController</span></span><br><span class="line">public class ConfigClientApplication &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(ConfigClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    @<span class="selector-tag">Value</span>(<span class="string">"$&#123;foo&#125;"</span>)</span><br><span class="line">    <span class="selector-tag">String</span> <span class="selector-tag">foo</span>;</span><br><span class="line"> </span><br><span class="line">    @<span class="selector-tag">RequestMapping</span>(value = <span class="string">"/foo"</span>)</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">String</span> <span class="selector-tag">hi</span>()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">foo</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动 config-client 工程，访问 <a href="http://localhost:8762/foo，显示" target="_blank" rel="noopener">http://localhost:8762/foo，显示</a></p><p>foo version 1</p><p>可见 config-client 成功向 config-server 工程读取了配置文件中 foo 变量的值。</p><h2 id="Config-Server从远程Git仓库读取配置文件"><a href="#Config-Server从远程Git仓库读取配置文件" class="headerlink" title="Config Server从远程Git仓库读取配置文件"></a>Config Server从远程Git仓库读取配置文件</h2><p>修改 config-server 的配置文件 application.yml，代码如下.<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">server</span>:</span><br><span class="line"><span class="attribute">port</span>: <span class="number">8769</span></span><br><span class="line"><span class="attribute">spring</span>:</span><br><span class="line"><span class="attribute">application</span>:</span><br><span class="line"><span class="attribute">name</span>: config-server</span><br><span class="line"><span class="attribute">cloud</span>:</span><br><span class="line"><span class="attribute">config</span>:</span><br><span class="line"><span class="attribute">label</span>: master</span><br><span class="line"><span class="attribute">server</span>:</span><br><span class="line"><span class="attribute">git</span>:</span><br><span class="line"><span class="attribute">uri</span>: <span class="attribute">https</span>:<span class="comment">//github.com/forezp/SpringcloudConfig</span></span><br><span class="line"><span class="attribute">search-paths</span>: respo</span><br><span class="line"><span class="attribute">username</span>: miles02<span class="variable">@163</span>.com</span><br><span class="line"><span class="attribute">password</span>:</span><br></pre></td></tr></table></figure></p><p>如果Git仓库为公开仓库，可以不填写用户名和密码，如果是私有仓库需要填写，本例子是公开仓库，放心使用。</p><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>spring.cloud.config.server.git.uri</td><td>配置git仓库地址</td></tr><tr><td>spring.cloud.config.server.git.searchPaths</td><td>配置仓库路径</td></tr><tr><td>spring.cloud.config.label</td><td>配置仓库的分支</td></tr><tr><td>spring.cloud.config.server.git.username</td><td>访问git仓库的用户名</td></tr><tr><td>spring.cloud.config.server.git.password</td><td>访问git仓库的用户密码</td></tr></tbody></table><p>远程仓库 <a href="https://github.com/xxxx/SpringcloudConfig/" target="_blank" rel="noopener">https://github.com/xxxx/SpringcloudConfig/</a> 中有个文件config-client-dev.properties文件中有一个属性：</p><p>foo = foo version 2</p><p>但是没有规定 server.port 属性，所以会以默认 的 8080 启动，启动程序：访问<a href="http://localhost:8080/foo" target="_blank" rel="noopener">http://localhost:8080/foo</a></p><p>foo version 2</p><p>可见，config-server 从远程 Git 仓库读取了配置文件，config-client 从config-server 读取了配置文件.</p><h2 id="构建高可用的-Config-Server"><a href="#构建高可用的-Config-Server" class="headerlink" title="构建高可用的 Config Server"></a>构建高可用的 Config Server</h2><p>将配置中心 config-server 做成一个微服务，并且将其集群化，从而达到高可用。</p><p>config-client 在工程启动类上加上注解 @EnableEurekaClient，开启 EurekaClient的功能。</p><p>在配置文件 application.yml 加入相关配置，向 service-id 为 config-server 的配置服务读取配置文件.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">config-client</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      fail-fast:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">config-server</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8762</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br></pre></td></tr></table></figure><p>启动 config-server、config-client 工程，访问 <a href="http://localhost:8762/foo，浏览器显" target="_blank" rel="noopener">http://localhost:8762/foo，浏览器显</a>:</p><p>foo version 2</p><p>只需要启动多个 config-server 实例即可搭建高可用的 config-server。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringCloud-Config配置中心&quot;&gt;&lt;a href=&quot;#SpringCloud-Config配置中心&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud Config配置中心&quot;&gt;&lt;/a&gt;SpringCloud Config配置
      
    
    </summary>
    
      <category term="SpringCloud" scheme="https://wxzhongwang.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://wxzhongwang.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud进阶之Ribbon和Feign(负载均衡)</title>
    <link href="https://wxzhongwang.github.io/2019/12/02/SpringCloud%20%E8%BF%9B%E9%98%B6%E4%B9%8B%20Ribbon%20%E5%92%8C%20Feign%20%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://wxzhongwang.github.io/2019/12/02/SpringCloud 进阶之 Ribbon 和 Feign 实现服务调用负载均衡/</id>
    <published>2019-12-02T04:30:00.000Z</published>
    <updated>2021-02-24T15:07:44.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-进阶之Ribbon和Feign-负载均衡"><a href="#Spring-Cloud-进阶之Ribbon和Feign-负载均衡" class="headerlink" title="Spring Cloud 进阶之Ribbon和Feign(负载均衡)"></a>Spring Cloud 进阶之Ribbon和Feign(负载均衡)</h1><h2 id="Ribbon-负载均衡"><a href="#Ribbon-负载均衡" class="headerlink" title="Ribbon 负载均衡"></a>Ribbon 负载均衡</h2><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端,负载均衡的工具;</p><h3 id="Ribbon-核心组件IRule"><a href="#Ribbon-核心组件IRule" class="headerlink" title="Ribbon 核心组件IRule"></a>Ribbon 核心组件IRule</h3><p>根据特定算法,从服务列表中选取一个要访问的服务:</p><ul><li>RoundRobinRule:轮询</li><li>RandomRule:随机</li><li>AvailabilityFilteringRule: 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务,以及并发的连接数量<br>超过阈值的服务,然后对剩余的服务列表按照轮询策略进行访问;</li><li>WeightedResponseTimeRule: 根据平均响应时间计算所有服务的权重,响应时间越快,服务权重越大,被选中的机率越高;<br>刚启动时,如果统计信息不足,则使用RoundRobinRule策略,等统计信息足够时,会切换到WeightedResponseTimeRule</li><li>RetryRule: 先按照RoundRobinRule的策略获取服务,如果获取服务失败,则在指定时间内会进行重试,获取可用的服务;</li><li>BestAvailableRule: 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务,然后选择一个并发量最小的服务;</li><li>ZoneAvoidanceRule: 默认规则,复合判断server所在区域的性能和server的可用性选择服务器;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConfigBean 添加新注解 @LoadBalanced, 用于加入 Ribbon 配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RoundRobinRule(); <span class="comment">// 显式的指定使用轮询算法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改主启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name=<span class="string">"MICROSERVICECLOUD-DEPT"</span>, configuration=MySelfRule.class)  <span class="comment">// 自定义Ribbon配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptConsumer80_App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(DeptConsumer80_App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// com.noodles.myrule</span></span><br><span class="line"><span class="comment">// 自定义Robbin规则类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule(); <span class="comment">//自定义均衡策略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Feign-负载均衡"><a href="#Feign-负载均衡" class="headerlink" title="Feign 负载均衡"></a>Feign 负载均衡</h2><p>Feign 是一个声明式WebService客户端:<br>使用方法: 定义一个接口,然后在上面添加注解;</p><ul><li>首先通过 @EnableFeignClients 注解开启 FeignClient 的功能。只有这个注解存在，才会在程序启动时开启 @FeignClient 注解的包扫描。</li><li>根据Feign的规则实现接口，并在接口上面加上 @FeignClient 注解。</li><li>程序启动后，会进行包扫描，扫描所有的@FeignClient 的注解的类，并将这些信息注入 IOC容器中。</li><li>当接口的方法被调用时，通过JDK的代理来生成具体的 RequestTemplate 模板对象。</li><li>根据 RequestTemplate 再生成 Http 请求的 Request 对象。</li><li>Request 对象交给 Client 去处理，其中 Client 的网络请求框架可以是 HTTPURLConnection、HttpClient 和 OkHttp。</li><li>最后Client被封装到LoadBalanceClient类，这个类结合类 Ribbon 做到了负载均衡。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建DeptClientService接口,并新增注解@FeignClient，来指定调用哪个服务</span></span><br><span class="line">   <span class="meta">@FeignClient(value=<span class="meta-string">"MICROSERVICECLOUD-DEPT"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptClientService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@RequestMapping(value=<span class="meta-string">"/dept/get/&#123;id&#125;"</span>, method= RequestMethod.GET)</span></span><br><span class="line">       <span class="keyword">public</span> Dept <span class="keyword">get</span>(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> long id);</span><br><span class="line"></span><br><span class="line">       <span class="meta">@RequestMapping(value=<span class="meta-string">"/dept/list"</span>, method= RequestMethod.GET)</span></span><br><span class="line">       <span class="keyword">public</span> List&lt;Dept&gt; list();</span><br><span class="line"></span><br><span class="line">       <span class="meta">@RequestMapping(value=<span class="meta-string">"/dept/add"</span>, method= RequestMethod.POST)</span></span><br><span class="line">       <span class="keyword">public</span> boolean add(Dept dept);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// microservice-consumer-dept-feign 工程修改Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController_Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于服务调用</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DeptClientService service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/consumer/dept/get/&#123;id&#125;"</span>)</span></span><br><span class="line"><span class="keyword">public</span> Dept <span class="keyword">get</span>(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.service.<span class="keyword">get</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/consumer/dept/list"</span>)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Dept&gt; list()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.service.list();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/consumer/dept/add"</span>)</span></span><br><span class="line"><span class="keyword">public</span> Object add(Dept dept) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.service.add(dept);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Cloud-进阶之Ribbon和Feign-负载均衡&quot;&gt;&lt;a href=&quot;#Spring-Cloud-进阶之Ribbon和Feign-负载均衡&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud 进阶之Ribbon和Fei
      
    
    </summary>
    
      <category term="SpringCloud" scheme="https://wxzhongwang.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://wxzhongwang.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Skywalking 分布式链路追踪</title>
    <link href="https://wxzhongwang.github.io/2019/12/02/Skywalking%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%20/"/>
    <id>https://wxzhongwang.github.io/2019/12/02/Skywalking 分布式链路追踪 /</id>
    <published>2019-12-02T04:30:00.000Z</published>
    <updated>2021-02-24T15:07:47.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Skywalking-分布式链路追踪"><a href="#Skywalking-分布式链路追踪" class="headerlink" title="Skywalking 分布式链路追踪"></a>Skywalking 分布式链路追踪</h1><h2 id="skywalking下载"><a href="#skywalking下载" class="headerlink" title="skywalking下载"></a>skywalking下载</h2><p>在官网下载最新版skywalking：<br>• <a href="http://skywalking.apache.org/downloads/" target="_blank" rel="noopener">下载地址</a></p><p><a href="http://skywalking.apache.org/downloads/" target="_blank" rel="noopener">http://skywalking.apache.org/downloads/</a></p><h2 id="解压后启动"><a href="#解压后启动" class="headerlink" title="解压后启动"></a>解压后启动</h2><p>启动skywalking后台程序和ui<br>在此之前可以修改ui等启动的端口。</p><blockquote><p>例如ui的端口，在webapp目录下–&gt;的webapp.yml文件，这里修改的是808端口，默认是8080</p></blockquote><h3 id="启动skywalking的方法是："><a href="#启动skywalking的方法是：" class="headerlink" title="启动skywalking的方法是："></a>启动skywalking的方法是：</h3><p>a.在解压下的bin目录，windows双击startup.bat，linux运行startup.sh</p><p>b.启动后检查端口 </p><h2 id="探针的配置"><a href="#探针的配置" class="headerlink" title="探针的配置"></a>探针的配置</h2><p>使用探针<br>在要监控的项目中使用探针，在开发环境，结合idea使用时，配置我们项目的启动参数：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:D:<span class="symbol">\c</span>loud<span class="symbol">\a</span>pache-skywalking-apm-bin<span class="symbol">\a</span>gent<span class="symbol">\s</span>kywalking-agent.jar</span><br></pre></td></tr></table></figure></p><p>-javaagent后面时skywalking探针的绝对地址，也就是之前下载的skywalking的压缩包解压出来后目录下的agent目录下的skywalking-agent.jar包。</p><p>IDEA中使用 VM options中加入相同配置.<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:D:/apache-skywalking-apm-bin/agent/skywalking-agent.jar</span><br><span class="line">-Dskywalking.collector.<span class="attribute">backend_service</span>=localhost:12800</span><br><span class="line"></span><br><span class="line">agent（实际地址）</span><br><span class="line">IP 记得改 </span><br><span class="line"></span><br><span class="line">eg: </span><br><span class="line"></span><br><span class="line">-javaagent:E:/微服务/skywalking/apache-skywalking-apm-bin-es7/agent/skywalking-agent.jar</span><br><span class="line">-Dskywalking.collector.<span class="attribute">backend_service</span>=172.16.129.139:12800</span><br></pre></td></tr></table></figure></p><h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><p>skywalking agent配置覆盖<br>在正式环境使用探针时，每使用一次，都去配置一下agent的参数信息也是比较繁琐的，所以skywalking有配置覆盖的选项，即不同的形式的配置优先级是不一样的，具体如下：</p><blockquote><p>JVM配置 &gt; 系统环境变量 &gt; agent.config</p></blockquote><p>上面所用的方式是agent.config的方式，优先级是最低的，所以还可以覆盖他的配置：<br>jvm配置：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:/path/to/skywalking-agent.jar=<span class="string">[option1]</span>=<span class="string">[value1]</span>,<span class="string">[option2]</span>=<span class="string">[value2]</span></span><br><span class="line">-javaagent:skywalkingagent.jar=agent.service_name=test,collector.backend_service=xxx:<span class="number">11800</span></span><br></pre></td></tr></table></figure></p><p>环境变量配置：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Dskywalking.[option1]</span>=[value1]</span><br><span class="line"><span class="attr">-Dskywalking.service_name</span>=xxxx</span><br></pre></td></tr></table></figure></p><p>这样在启动的时候，就不用每次去复制一份agent文件了，只需要在启动时加上参数即可</p><h2 id="skywalking修改数据源"><a href="#skywalking修改数据源" class="headerlink" title="skywalking修改数据源"></a>skywalking修改数据源</h2><p> skywalking 版本 8.0， 对应使用mysql8.0,所以复制相应驱动至 skywalking\oap-libs<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mysql-connector-java-8</span><span class="selector-class">.0</span><span class="selector-class">.21</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Skywalking-分布式链路追踪&quot;&gt;&lt;a href=&quot;#Skywalking-分布式链路追踪&quot; class=&quot;headerlink&quot; title=&quot;Skywalking 分布式链路追踪&quot;&gt;&lt;/a&gt;Skywalking 分布式链路追踪&lt;/h1&gt;&lt;h2 id=&quot;s
      
    
    </summary>
    
      <category term="SpringCloud" scheme="https://wxzhongwang.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://wxzhongwang.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://wxzhongwang.github.io/2019/08/22/ConcurrentHashMap%20%E5%92%8C%20Hashtable%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://wxzhongwang.github.io/2019/08/22/ConcurrentHashMap 和 Hashtable 的区别/</id>
    <published>2019-08-22T13:58:18.239Z</published>
    <updated>2019-08-23T15:46:17.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ConcurrentHashMap-和-Hashtable-的区别"><a href="#ConcurrentHashMap-和-Hashtable-的区别" class="headerlink" title="ConcurrentHashMap 和 Hashtable 的区别"></a>ConcurrentHashMap 和 Hashtable 的区别</h1><h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>[JDK1.7]<br>ConcurrentHashMap 底层采用 分段的数组+链表 实现，<br>[JDK1.8]<br>ConcurrentHashMap 采用的数据结构跟HashMap1.8的结构一样，数组+链表/红黑二叉树。</p><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采用 数组+链表 的形式，<br>数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；</p><h2 id="实现线程安全的方式（重要）"><a href="#实现线程安全的方式（重要）" class="headerlink" title="实现线程安全的方式（重要）"></a>实现线程安全的方式（重要）</h2><h3 id="ConcurrentHashMap-1"><a href="#ConcurrentHashMap-1" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>[JDK1.7]<br>ConcurrentHashMap（分段锁） 对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，<br>就不会存在锁竞争，提高并发访问率。<br>[JDK1.8]<br>摒弃了Segment的概念，而是直接用 Node 数组 + 链表 + 红黑树 的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。<br>（JDK1.6以后 对 synchronized锁做了很多优化） 整个看起来就像是优化过且线程安全的 HashMap，<br>虽然在JDK1.8中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；</p><h3 id="Hashtable-同一把锁"><a href="#Hashtable-同一把锁" class="headerlink" title="Hashtable(同一把锁)"></a>Hashtable(同一把锁)</h3><p>使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，<br>可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，<br>竞争会越来越激烈效率越低。HashTable性能差主要是由于所有操作需要竞争同一把锁，而如果容器中有多把锁，<br>每一把锁锁一段数据，这样在多线程访问时不同段的数据时，就不会存在锁竞争了，这样便可以有效地提高并发效率。<br>这就是ConcurrentHashMap所采用的”分段锁”思想。</p><p><strong>HashTable:</strong></p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/HashTable全表锁.png" alt="HashTable全表锁"></p><p><strong>JDK1.7的ConcurrentHashMap：</strong></p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/ConcurrentHashMap分段锁.jpg" alt="JDK1.7的ConcurrentHashMap"></p><p><strong>JDK1.8的ConcurrentHashMap（TreeBin: 红黑二叉树节点 Node: 链表节点）：</strong></p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/JDK1.8-ConcurrentHashMap-Structure.jpg" alt="JDK1.8的ConcurrentHashMap"></p><p>　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ConcurrentHashMap-和-Hashtable-的区别&quot;&gt;&lt;a href=&quot;#ConcurrentHashMap-和-Hashtable-的区别&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentHashMap 和 Hashta
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NOSQL</title>
    <link href="https://wxzhongwang.github.io/2019/08/07/NOSQL/"/>
    <id>https://wxzhongwang.github.io/2019/08/07/NOSQL/</id>
    <published>2019-08-07T14:59:05.594Z</published>
    <updated>2019-08-11T05:15:06.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h1><p>全称：NoSQL = Not Only SQL</p><p>泛指非关系型数据库</p><p>四大分类：</p><p>1）键值(Key-Value)存储数据库</p><p>Key/value模型对于IT系统来说的优势在于简单、易部署。<br>但是如果DBA只对部分值进行查询或更新的时候，Key/value就显得效率低下了。<br>举例如：Redis.</p><p>2）列存储数据库</p><p>这部分数据库通常是用来应对分布式存储的海量数据。<br>键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。<br>如：Cassandra, HBase, Riak.</p><p>3）文档型</p><p>文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似。<br>该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。<br>文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。<br>而且文档型数据库比键值数据库的查询效率更高。如：CouchDB, MongoDb.<br>国内也有文档型数据库SequoiaDB，已经开源。</p><p>4）图形(Graph)数据库</p><p>图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。</p><p>NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。<br>许多NoSQL数据库都有REST式的数据接口或者查询API。</p><p>我们总结NoSQL数据库在以下的这几种情况下比较适用：</p><ol><li>数据模型比较简单；</li><li>需要灵活性更强的IT系统；</li><li>对数据库性能要求较高；</li><li>不需要高度的数据一致性；</li><li>对于给定key，比较容易映射复杂值的环境。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NOSQL&quot;&gt;&lt;a href=&quot;#NOSQL&quot; class=&quot;headerlink&quot; title=&quot;NOSQL&quot;&gt;&lt;/a&gt;NOSQL&lt;/h1&gt;&lt;p&gt;全称：NoSQL = Not Only SQL&lt;/p&gt;
&lt;p&gt;泛指非关系型数据库&lt;/p&gt;
&lt;p&gt;四大分类：&lt;/p&gt;

      
    
    </summary>
    
      <category term="Redis" scheme="https://wxzhongwang.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://wxzhongwang.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>互联网金融行业数仓分层</title>
    <link href="https://wxzhongwang.github.io/2019/08/07/%E4%BA%92%E8%81%94%E7%BD%91%E9%87%91%E8%9E%8D%E8%A1%8C%E4%B8%9A%E6%95%B0%E4%BB%93%E5%88%86%E5%B1%82/"/>
    <id>https://wxzhongwang.github.io/2019/08/07/互联网金融行业数仓分层/</id>
    <published>2019-08-07T14:37:26.011Z</published>
    <updated>2019-06-27T11:05:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网金融行业数仓分层"><a href="#互联网金融行业数仓分层" class="headerlink" title="互联网金融行业数仓分层"></a>互联网金融行业数仓分层</h1><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul><li><p>ODL层 （Operational Data Layer）：操作数据层</p><blockquote><p>外部数据什么样，该层数据就是什么样（关系型数据库、JSON格式等)<br>部分关系型数据可以直接转IDL层</p></blockquote></li><li><p>BDL层 （Base Data Layer）：基础数据层</p><blockquote><p>ODL层经过简单格式化解析后存储到BDL层，常见于JSON日志格式的解析。</p></blockquote></li><li><p>IDL层 （Interface Data Layer）：接口层，也称主题表，宽表</p><blockquote><p>由BDL层经过去重、去噪、字典翻译、空值转化，日期格式化、关联JOIN、维度分析等清洗后的数据。如：用户、产品、绑卡、订单、用户行为等明细数据。</p></blockquote></li><li><p>ADL层（Application Data Layer）：应用层 ，也称数据集市</p><blockquote><p>通常与需求对接，由IDL层基于某些维度的深度加工统计汇总等操作转化而来，涉及到多个主题以及tmp数据之间的关联JOIN后的结果。</p></blockquote></li><li><p>DIC层（Dictionary Data Layer）：字典层</p><blockquote><p>存储一些诸如省、市、县区域表、渠道列表、商品类目等等表数据，可以从数据源直接sqoop生成dic_xxx表，也可以通过odl层转化层dic_表。</p></blockquote></li><li><p>TMP层（Temporary Data Layer）：临时层</p><blockquote><p>存储一些中间计算结果</p></blockquote></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3763924-bfd47ed0607208d2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="image"></p><p>简要说明:</p><blockquote><ol><li>层次间的转换没必要循规蹈矩，按部就班，适当做到灵活，避免重复清洗浪费资源</li><li>ODL层干净的关系型数据可以直接转换为IDL层数据，减少计算量</li><li>ODL层侧重与外部对接，BDL层/TMP层/IDL层侧重清洗，IDL层和ADL层侧重对外提供应用服务</li><li>层数太少不够灵活，太多则在数据推翻重洗耗时，时间成本（一个坑）<br>数据源提供的数据越详细越好，避免后期大量重复的清洗工作。</li></ol></blockquote><h2 id="“星型模型”和“雪花模型”"><a href="#“星型模型”和“雪花模型”" class="headerlink" title="“星型模型”和“雪花模型”"></a>“星型模型”和“雪花模型”</h2><p>简单解释：  </p><ul><li>（1）星型模型：事实表+维度表（区域、类目、性别…)等多表通过预先JOIN冗余到一张宽表里去，常见IDL层。</li><li>（2）雪花模型：在计算的时候，才将事实表跟维度表做join。</li></ul><blockquote><p>现在一般都是采用（1）的模式，为什么呢？   预先计算，挺高性能，避免后续重复计算。CPU和内存的资源永远比磁盘空间宝贵的多。<br>至于（2)的方式，有点就是灵活，不需要太多的重复清洗，但是性能不如（1）.</p></blockquote><h2 id="建设思路"><a href="#建设思路" class="headerlink" title="建设思路"></a>建设思路</h2><blockquote><p>从需求出发，逆推应用层ADL结构，进而推导出它涉及的主题表IDL表结构，再推导可能涉及的基础表BDL表结构，最后分析所需的数据源取自何处。<br>需求包含“明确”需求和“潜在”需求。</p></blockquote><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><ol><li>创建ODL、BDL、IDL、ADL层表结构(HQL)</li><li>确定数据抽取方案（增量或全量）</li><li>编写sqoop脚本将data同步到ODL层</li><li>编写ODL-&gt;BDL-&gt;IDL-&gt;ADL层ETL清洗脚本(HQL),注意：清洗的顺序，时间<br>确保上一层的数据稳定，减少对下一层的影响</li><li>编写Hue workflow Ooize脚本</li><li>打通Kylin、FineBI、Hive关系，实现数据可视化、可导出目标,将稳定后所有脚本WIKI上保存一份</li></ol><p>其他相关的请参照原博客</p><p>作者：水星有鱼<br>链接：<a href="https://www.jianshu.com/p/f941967aeee8" target="_blank" rel="noopener">https://www.jianshu.com/p/f941967aeee8</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;互联网金融行业数仓分层&quot;&gt;&lt;a href=&quot;#互联网金融行业数仓分层&quot; class=&quot;headerlink&quot; title=&quot;互联网金融行业数仓分层&quot;&gt;&lt;/a&gt;互联网金融行业数仓分层&lt;/h1&gt;&lt;h2 id=&quot;专业术语&quot;&gt;&lt;a href=&quot;#专业术语&quot; class=&quot;
      
    
    </summary>
    
      <category term="数据仓库" scheme="https://wxzhongwang.github.io/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
    
      <category term="数据仓库" scheme="https://wxzhongwang.github.io/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>SparkStreaming和Storm</title>
    <link href="https://wxzhongwang.github.io/2019/08/07/SparkStreaming%E5%92%8CStorm%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://wxzhongwang.github.io/2019/08/07/SparkStreaming和Storm的区别/</id>
    <published>2019-08-07T14:37:26.004Z</published>
    <updated>2019-06-27T11:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SparkStreaming和Storm"><a href="#SparkStreaming和Storm" class="headerlink" title="SparkStreaming和Storm"></a>SparkStreaming和Storm</h1><p>Storm和Spark Streaming都是分布式流处理的开源框架，但是它们之间还是有一些区别的，这里将进行比较并指出它们的重要的区别。</p><h2 id="处理模型以及延迟"><a href="#处理模型以及延迟" class="headerlink" title="处理模型以及延迟"></a>处理模型以及延迟</h2><p>虽然这两个框架都提供可扩展性(Scalability)和可容错性(Fault Tolerance),但是它们的处理模型从根本上说是不一样的。Storm处理的是每次传入的一个事件，而Spark Streaming是处理某个时间段窗口内的事件流。因此，Storm处理一个事件可以达到亚秒级的延迟，而Spark Streaming则有秒级的延迟。</p><h2 id="容错和数据保证"><a href="#容错和数据保证" class="headerlink" title="容错和数据保证"></a>容错和数据保证</h2><p>在容错数据保证方面的权衡方面，Spark Streaming提供了更好的支持容错状态计算。在Storm中，当每条单独的记录通过系统时必须被跟踪，所以Storm能够至少保证每条记录将被处理一次，但是在从错误中恢复过来时候允许出现重复记录，这意味着可变状态可能不正确地被更新两次。而Spark Streaming只需要在批处理级别对记录进行跟踪处理，因此可以有效地保证每条记录将完全被处理一次，即便一个节点发生故障。虽然Storm的 Trident library库也提供了完全一次处理的功能。但是它依赖于事务更新状态，而这个过程是很慢的，并且通常必须由用户实现。</p><p>简而言之,如果你需要亚秒级的延迟，Storm是一个不错的选择，而且没有数据丢失。如果你需要有状态的计算，而且要完全保证每个事件只被处理一次，Spark Streaming则更好。Spark Streaming编程逻辑也可能更容易，因为它类似于批处理程序，特别是在你使用批次(尽管是很小的)时。</p><h2 id="实现和编程API"><a href="#实现和编程API" class="headerlink" title="实现和编程API"></a>实现和编程API</h2><p>Storm主要是由Clojure语言实现，SparkStreaming是由Scala实现。如果你想看看这两个框架是如何实现的或者你想自定义一些东西你就得记住这一点。Storm是由BackType和Twitter开发，而Spark Streaming是在UC Berkeley开发的。</p><p>Storm提供了Java API，同时也支持其他语言的API。SparkStreaming支持Scala和Java语言(其实也支持Python)。另外SparkStreaming的一个很棒的特性就是它是在Spark框架上运行的。这样你就可以想使用其他批处理代码一样来写SparkStreaming程序，或者是在Spark中交互查询。这就减少了单独编写流批量处理程序和历史数据处理程序。</p><h2 id="生产支持"><a href="#生产支持" class="headerlink" title="生产支持"></a>生产支持</h2><p>Storm已经出现好多年了，而且自从2011年开始就在Twitter内部生产环境中使用，还有其他一些公司。而Spark Streaming是一个新的项目，并且在2013年仅仅被Sharethrough使用(据作者了解)。</p><p>Storm是 Hortonworks Hadoop数据平台中流处理的解决方案，而Spark Streaming出现在 MapR的分布式平台和Cloudera的企业数据平台中。除此之外，Databricks是为Spark提供技术支持的公司，包括了Spark Streaming。</p><h2 id="集群管理集成"><a href="#集群管理集成" class="headerlink" title="集群管理集成"></a>集群管理集成</h2><p>尽管两个系统都运行在它们自己的集群上，Storm也能运行在Mesos，而SparkStreaming能运行在YARN 和 Mesos上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SparkStreaming和Storm&quot;&gt;&lt;a href=&quot;#SparkStreaming和Storm&quot; class=&quot;headerlink&quot; title=&quot;SparkStreaming和Storm&quot;&gt;&lt;/a&gt;SparkStreaming和Storm&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="大数据" scheme="https://wxzhongwang.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hadoop" scheme="https://wxzhongwang.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Java基础面试题四</title>
    <link href="https://wxzhongwang.github.io/2019/08/07/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%9B%9B/"/>
    <id>https://wxzhongwang.github.io/2019/08/07/Java基础面试题四/</id>
    <published>2019-08-07T14:37:25.985Z</published>
    <updated>2019-08-11T05:16:14.083Z</updated>
    
    <content type="html"><![CDATA[<p>Java基础面试题四</p><blockquote><p>Q1: Java中垃圾回收有什么目的？什么时候进行垃圾回收？ </p></blockquote><p>垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。</p><blockquote><p>Q2：如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？ </p></blockquote><p>不会，在下一个垃圾回收周期中，这个对象将是可被回收的。</p><blockquote><p>Q3: String是最基本的数据类型吗? </p></blockquote><p>基本数据类型包括:</p><ul><li>byte</li><li>int</li><li>char</li><li>long</li><li>float</li><li>double</li><li>boolean</li><li>short </li></ul><p>java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类。</p><blockquote><p>Q4: int 和 Integer 有什么区别?</p></blockquote><p>Java 提供两种不同的类型：引用类型和原始类型（或内置类型）。Int是java的原始数据类型，Integer是java为int提供的封装类。Java为每个原始类型提供了封装类。</p><blockquote><p>Q5: String 和 StringBuffer的区别?</p></blockquote><p>JAVA平台提供了两个类：String和StringBuffer，它们可以储存和操作字符串，即包含多个字符的字符数据。这个String类提供了数值不可改变的字符串。而这个StringBuffer类提供的字符串进行修改。</p><blockquote><p>Q6: ArrayList,Vector,LinkedList的存储性能和特性?</p></blockquote><p>ArrayList和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList差，而LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List的子类特点</span><br><span class="line"><span class="symbol">        ArrayList:</span></span><br><span class="line">            底层数据结构是数组，查询快，增删慢</span><br><span class="line">            线程不安全，效率高</span><br><span class="line"><span class="symbol">        Vector:</span></span><br><span class="line">            底层数据结构是数组，查询快，增删慢</span><br><span class="line">            线程安全，效率低</span><br><span class="line"><span class="symbol">        LinkedList:</span></span><br><span class="line">            底层数据结构是链表，查询慢，增删快</span><br><span class="line">            线程不安全，效率高</span><br></pre></td></tr></table></figure></p><blockquote><p>Q7: Collection 和 Collections的区别 </p></blockquote><p>Collection是集合类的上级接口，继承与他的接口主要有Set和List. </p><p>Collections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。<br>集合的继承体系：<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1551609409314&amp;di=26c716fbc7abe264f61d07f051639caf&amp;imgtype=0&amp;src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fjpg%2F16f3e1d844693be57f7e0f55c969f42d.jpg%3Fx-oss-process%3Dimage%2Fresize%2Cp_100%2Fauto-orient%2C1%2Fquality%2Cq_90%2Fformat%2Cjpg%2Fwatermark%2Cimage_eXVuY2VzaGk%3D%2Ct_100" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java基础面试题四&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q1: Java中垃圾回收有什么目的？什么时候进行垃圾回收？ &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://wxzhongwang.github.io/categories/Java/"/>
    
    
      <category term="面试题" scheme="https://wxzhongwang.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java基础面试题五</title>
    <link href="https://wxzhongwang.github.io/2019/08/07/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%94/"/>
    <id>https://wxzhongwang.github.io/2019/08/07/Java基础面试题五/</id>
    <published>2019-08-07T14:37:25.985Z</published>
    <updated>2019-08-11T05:16:10.202Z</updated>
    
    <content type="html"><![CDATA[<p>Java基础面试题五</p><blockquote><p>Q1: &amp; 和 &amp;&amp; 的区别</p></blockquote><p>&amp;是位运算符，表示按位与运算，&amp;&amp;是逻辑运算符，表示逻辑与（and）。</p><blockquote><p>Q2: final, finally, finalize的区别</p></blockquote><ul><li>final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。 </li><li>finally,异常处理语句结构的一部分，表示总是执行。 </li><li>finalize是Object类的一个方法，垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。</li></ul><blockquote><p>Q3: sleep() 和 wait() 有什么区别? </p></blockquote><p>sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。 </p><p>wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或not ifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。</p><blockquote><p>Q4: error和exception有什么区别? </p></blockquote><ul><li>error:<br>表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。 </li><li>exception: 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。</li></ul><blockquote><p>Q5: GC是什么? 为什么要有GC? </p></blockquote><p>GC是垃圾收集的意思（Gabage Collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要请求垃圾收集，可以调用下面的方法之一：  </span><br><span class="line"><span class="selector-tag">System</span><span class="selector-class">.gc</span>() </span><br><span class="line"><span class="selector-tag">Runtime</span><span class="selector-class">.getRuntime</span>()<span class="selector-class">.gc</span>()</span><br></pre></td></tr></table></figure></p><p>当然，如果需要，程序员可以在Java程序中显式地使用System.gc()来强制进行一次立即的内存清理。<br>因为显式声明是做堆内存全扫描，也就是FullGC，是需要停止所有的活动的（Stop The World Collection），你的应用能承受这个吗？而其显示调用System.gc()只是给虚拟机一个建议，不一定会执行，因为System.gc()在一个优先级很低的线程中执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java基础面试题五&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q1: &amp;amp; 和 &amp;amp;&amp;amp; 的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;amp;是位运算符，表示按位与运算，&amp;amp;&amp;amp;是逻辑运算符，表示逻辑与（and）。&lt;/p&gt;
&lt;block
      
    
    </summary>
    
      <category term="Java" scheme="https://wxzhongwang.github.io/categories/Java/"/>
    
    
      <category term="面试题" scheme="https://wxzhongwang.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java基础面试题二</title>
    <link href="https://wxzhongwang.github.io/2019/08/07/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C/"/>
    <id>https://wxzhongwang.github.io/2019/08/07/Java基础面试题二/</id>
    <published>2019-08-07T14:37:25.984Z</published>
    <updated>2019-08-11T05:16:06.958Z</updated>
    
    <content type="html"><![CDATA[<p>Java基础面试题二</p><blockquote><p>Q1: 什么是死锁(deadlock)？ </p></blockquote><p>两个进程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是两个进程都陷入了无限的等待中。<br>代码表示：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DieLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">    DieLock dl1 = <span class="keyword">new</span> <span class="type">DieLock</span>(<span class="literal">true</span>);</span><br><span class="line">    DieLock dl2 = <span class="keyword">new</span> <span class="type">DieLock</span>(<span class="literal">false</span>);</span><br><span class="line">    dl1.start();</span><br><span class="line">    dl2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>理想状态下dl1线程为true从if执行先打出”if objA”然后再接着打出”if objB”之后释放A、B的锁对象，之后dl2线程执行else语句打出”else objB”，”else objA”。<br>非理想状态下dl1先打出”if objA”，之后线程dl2执行打出”else objB”，然后1、2线程的锁对象A和B都处于被锁的状态，两个线程争夺锁对象发生死锁现象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DieLock</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DieLock</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (MyLock.objA) &#123;</span><br><span class="line">                System.out.println(<span class="string">"if objA"</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (MyLock.objB) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"if objB"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (MyLock.objB) &#123;</span><br><span class="line">                System.out.println(<span class="string">"else objB"</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (MyLock.objA) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"else objA"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java基础面试题二&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q1: 什么是死锁(deadlock)？ &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两个进程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是两个进程都陷入了无限的等待中。&lt;br&gt;代码表示：&lt;br
      
    
    </summary>
    
      <category term="Java" scheme="https://wxzhongwang.github.io/categories/Java/"/>
    
    
      <category term="面试题" scheme="https://wxzhongwang.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
